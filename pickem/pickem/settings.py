"""
Django settings for pickem project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
try:
    from dotenv import load_dotenv  # type: ignore
except Exception:
    load_dotenv = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Load .env if present (check parent directory first, then BASE_DIR)
if load_dotenv:
    env_file = BASE_DIR.parent / '.env'
    if not env_file.exists():
        env_file = BASE_DIR / '.env'
    load_dotenv(env_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*b81w^qc#k(8d6p-ozt(1aa&bk$yw@b40ban5_bj(xvcrbog!3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cfb',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pickem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pickem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'  # Eastern Time

USE_I18N = True

USE_TZ = True  # Keep timezone-aware datetimes


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Auth redirects
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# External API keys
CFBD_API_KEY = os.getenv('CFBD_API_KEY', '')
ODDS_API_KEY = os.getenv('ODDS_API_KEY', '')

# ============================================================================
# CELERY & REDIS CONFIGURATION
# ============================================================================
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Redis cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.getenv('REDIS_CACHE_URL', 'redis://127.0.0.1:6379/1'),
        'OPTIONS': {
            'db': 1,
            'parser_class': 'redis.connection.PythonParser',
            'pool_class': 'redis.BlockingConnectionPool',
        },
        'KEY_PREFIX': 'pickem',
        'TIMEOUT': 300,  # 5 minutes default
    }
}

# ============================================================================
# ESPN LIVE SCORE AUTO-UPDATE CONFIGURATION
# ============================================================================

# ESPN API Configuration
ESPN_API_BASE_URL = "https://site.api.espn.com/apis/site/v2/sports/football/college-football"
ESPN_SCOREBOARD_URL = f"{ESPN_API_BASE_URL}/scoreboard"
ESPN_API_TIMEOUT = 20  # seconds


# Time window for checking games (in days)
GAME_CHECK_WINDOW_PAST = 2  # Check games from the last 2 days
GAME_CHECK_WINDOW_FUTURE = 1  # Check games up to 1 day in the future

# Error handling and circuit breaker
ESPN_API_MAX_RETRIES = 3
ESPN_API_RETRY_BACKOFF_FACTOR = 2  # Exponential backoff: 2, 4, 8 seconds
ESPN_API_RETRY_JITTER = 1  # Random jitter up to 1 second
ESPN_API_CIRCUIT_BREAKER_THRESHOLD = 5  # Consecutive failures before opening circuit
ESPN_API_CIRCUIT_BREAKER_TIMEOUT = 300  # 5 minutes before attempting to close circuit

# Redis key namespaces
REDIS_KEY_GAME_PREFIX = "scores:game:"
REDIS_KEY_LIVE_STATE = "scores:live_state"
REDIS_KEY_CIRCUIT_BREAKER = "scores:circuit_breaker"
REDIS_KEY_LAST_POLL = "scores:last_poll"
REDIS_KEY_GAME_CACHE_TTL = 120  # 2 minutes for individual game cache
REDIS_KEY_LIVE_STATE_TTL = 180  # 3 minutes for live state

