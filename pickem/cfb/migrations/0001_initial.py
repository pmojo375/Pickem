# Generated by Django 5.2.7 on 2025-10-07 00:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Venue or location name', max_length=128)),
                ('city', models.CharField(blank=True, max_length=64)),
                ('state', models.CharField(blank=True, max_length=64)),
                ('zip', models.CharField(blank=True, max_length=16)),
                ('country_code', models.CharField(blank=True, max_length=8)),
                ('timezone', models.CharField(blank=True, max_length=64)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('elevation', models.FloatField(blank=True, help_text='Elevation in feet', null=True)),
                ('capacity', models.IntegerField(blank=True, help_text='Venue capacity', null=True)),
                ('year_constructed', models.IntegerField(blank=True, null=True)),
                ('grass', models.BooleanField(blank=True, help_text='True if grass, False if turf', null=True)),
                ('dome', models.BooleanField(blank=True, help_text='True if dome/indoor', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(unique=True)),
                ('name', models.CharField(blank=True, max_length=64)),
                ('is_active', models.BooleanField(default=False)),
                ('teams_pulled', models.BooleanField(default=False, help_text='Teams data pulled from CFBD for this season')),
                ('games_pulled', models.BooleanField(default=False, help_text='Games data pulled from CFBD for this season')),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_leagues', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Rules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_key_picks_per_week', models.PositiveIntegerField(default=1)),
                ('points_per_correct_pick', models.IntegerField(default=1)),
                ('points_per_key_pick', models.IntegerField(default=2)),
                ('season', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='cfb.season')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('nickname', models.CharField(blank=True, max_length=128)),
                ('abbreviation', models.CharField(blank=True, max_length=16)),
                ('conference', models.CharField(blank=True, max_length=64)),
                ('division', models.CharField(blank=True, max_length=64)),
                ('classification', models.CharField(blank=True, max_length=16)),
                ('logo_url', models.URLField(blank=True)),
                ('cfbd_id', models.IntegerField(blank=True, db_index=True, null=True)),
                ('espn_id', models.CharField(blank=True, db_index=True, max_length=32, null=True)),
                ('primary_color', models.CharField(blank=True, max_length=7)),
                ('alt_color', models.CharField(blank=True, max_length=7)),
                ('twitter', models.CharField(blank=True, max_length=32)),
                ('city', models.CharField(blank=True, max_length=64)),
                ('state', models.CharField(blank=True, max_length=64)),
                ('venue_name', models.CharField(blank=True, max_length=128)),
                ('venue_id', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('record_wins', models.PositiveIntegerField(default=0)),
                ('record_losses', models.PositiveIntegerField(default=0)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams', to='cfb.location')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='cfb.season')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('season', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('week', models.PositiveIntegerField(blank=True, db_index=True, help_text='Week number of the season', null=True)),
                ('season_type', models.CharField(blank=True, default='regular', help_text='regular, postseason, etc.', max_length=32)),
                ('kickoff', models.DateTimeField()),
                ('neutral_site', models.BooleanField(default=False)),
                ('conference_game', models.BooleanField(default=False)),
                ('attendance', models.IntegerField(blank=True, null=True)),
                ('venue_name', models.CharField(blank=True, max_length=128)),
                ('venue_id', models.IntegerField(blank=True, null=True)),
                ('opening_home_spread', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('opening_away_spread', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('opening_total', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('current_home_spread', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('current_away_spread', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('current_total', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('home_score', models.PositiveIntegerField(blank=True, null=True)),
                ('away_score', models.PositiveIntegerField(blank=True, null=True)),
                ('quarter', models.PositiveIntegerField(blank=True, null=True)),
                ('clock', models.CharField(blank=True, max_length=16)),
                ('is_final', models.BooleanField(default=False)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='cfb.season')),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_games', to='cfb.team')),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_games', to='cfb.team')),
            ],
            options={
                'ordering': ['kickoff'],
            },
        ),
        migrations.CreateModel(
            name='GameSpread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_spread', models.DecimalField(decimal_places=2, max_digits=5)),
                ('away_spread', models.DecimalField(decimal_places=2, max_digits=5)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(blank=True, max_length=64)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spreads', to='cfb.game')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['game', '-timestamp'], name='cfb_gamespr_game_id_d2a008_idx')],
            },
        ),
        migrations.CreateModel(
            name='LeagueGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locked_home_spread', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('locked_away_spread', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('spread_locked_at', models.DateTimeField(blank=True, null=True)),
                ('selected_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_selections', to='cfb.game')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_games', to='cfb.league')),
            ],
            options={
                'ordering': ['game__kickoff'],
                'indexes': [models.Index(fields=['league', 'game'], name='cfb_leagueg_league__495c15_idx')],
                'unique_together': {('league', 'game')},
            },
        ),
        migrations.CreateModel(
            name='LeagueMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin'), ('member', 'Member')], default='member', max_length=10)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='cfb.league')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-joined_at'],
                'unique_together': {('league', 'user')},
            },
        ),
        migrations.CreateModel(
            name='LeagueRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_per_correct_pick', models.IntegerField(default=1, help_text='Points awarded for each correct pick')),
                ('key_pick_extra_points', models.IntegerField(default=1, help_text='Extra points for correct key picks')),
                ('spread_lock_weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], default=2, help_text='Day of the week when spreads lock in place')),
                ('pickable_games_per_week', models.IntegerField(default=10, help_text='Maximum number of games available for picking each week')),
                ('picks_per_week', models.IntegerField(default=0, help_text='Number of picks required per week (0 = must pick all available games)')),
                ('key_picks_enabled', models.BooleanField(default=True, help_text='Allow users to designate key picks for bonus points')),
                ('number_of_key_picks', models.IntegerField(default=1, help_text='Number of key picks allowed per week')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='cfb.league')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_rules', to='cfb.season')),
            ],
            options={
                'verbose_name_plural': 'League rules',
                'ordering': ['-season__year'],
                'unique_together': {('league', 'season')},
            },
        ),
        migrations.CreateModel(
            name='Pick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_key_pick', models.BooleanField(default=False)),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='picks', to='cfb.game')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='picks', to='cfb.league')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='picks', to=settings.AUTH_USER_MODEL)),
                ('picked_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='picks', to='cfb.team')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['league', 'user'], name='cfb_pick_league__0fb63b_idx'), models.Index(fields=['league', 'game'], name='cfb_pick_league__67d285_idx')],
                'unique_together': {('league', 'game', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['season', 'week'], name='cfb_game_season__e1bcd6_idx'),
        ),
    ]
